2. 
The if-then-else Statement 
The if-then and if-then-else Statements 
The output from the program is: 
Omitting them can make the code more brittle. 
Deciding when to omit the braces is matter of personal taste. 
The if-then statement is the most basic of all the control flow statements. 
The compiler cannot catch this sort of error; you' lljust get the wrong results. 
The if-then-else statement provides secondary path of execution when an "if" clause evaluates to false. 
It tells your program to execute certain section of code only if particular test evaluates to true. 
In this case, the action is to simply printan error message stating that the bicycle has already stopped. 
However, once condition is satisfied, the appropriate statements are executed (grade 'C' ;) and the remaining conditions are not evaluated. 
If second statement is later added to the "then" clause, common mistake would be forgetting to add the newly required braces. 
For example, the Bicycle class could allow the brakes to decrease the bicycle' speed only if the bicycle is already in motion. 
If this test evaluates to false (meaning that the bicycle is not in motion) control jumps to the end of the if-then statement. 
You may have noticed that the value of testscore can satisfy more than one expression in the compound statement: 76 >= 70 and 76 >= 60 
The following program, IfElseDemo, assigns grade based on the value of test score: an for score of 90 or above, for score of 80 or above, and so on. 
